<?

/**
 * -----------------------------------------------------------------------------
 * # Migrator
 * 
 * É responsável por realizar as migrações do projeto, tanto o UP 
 * quanto o DOWN.
 * 
 * Para utilizar o migrator, é necessário entrar no container do PHP, tente (com
 * o projeto rodando no docker e dentro da pasta raiz):
 * 
 * sudo docker exec -it php bash
 * 
 * Você entrará no container do PHP. Agora, para utilizar o migrator, faça:
 * 
 * php /www/priv/repo/migrator [OPÇÃO]
 * 
 * As opções disponíveis são:
 * 
 * ## up ?[(int > 0) $number]:
 *  
 * Como padrão, fará UP de todas as migrations que ainda não foram processadas.
 * Caso receba um segundo argumento (número inteiro maior que 0), irá upar a 
 * quantidade de migrations equivalente ao número fornecido.
 * 
 * ### Exemplos:
 * 
 * php /www/priv/repo/migrator up 1
 * php /www/priv/repo/migrator up 5
 * php /www/priv/repo/migrator up
 * 
 * ## down ?[(int > 0) $number]:
 * 
 * Como padrão, fará o DOWN de todas as migrations que já foram processadas.
 * Caso receba um segundo argumento (número inteiro maior que 0), irá fazer o
 * down da quantidade de migrations equivalente ao número fornecido.
 * 
 * ### Exemplos:
 * 
 * php /www/priv/repo/migrator down 1
 * php /www/priv/repo/migrator down 5
 * php /www/priv/repo/migrator down
 * -----------------------------------------------------------------------------
 */
class Migrator
{
  private $migrated = [];

  private function get_migrated_file(): array
  {
    if (!file_exists(CACHEDIR . '/migrator')) {
      mkdir(CACHEDIR . '/migrator', 0777, true);
    }

    $migrated_file = CACHEDIR . '/migrator/migrated.json';

    if (!file_exists($migrated_file)) {
      fopen($migrated_file, 'x');
    }

    $migrated = file_get_contents($migrated_file) ?? [];
    $migrated = json_decode($migrated) ?? [];

    return $migrated;
  }

  private function save_migrated_file(): void
  {
    $migrated_file = CACHEDIR . '/migrator/migrated.json';

    file_put_contents(
      $migrated_file,
      json_encode($this->migrated),
    );
  }

  public function start(array $arguments): void
  {
    if (!empty($arguments[2]) && !ctype_digit($arguments[2])) {
      throw new Exception('Quantidade ' . $arguments[2] . ' inválida.');
    }

    $this->migrated = $this->get_migrated_file();

    if (!empty($arguments[2])) {
      $number = $arguments[2];
    } else {
      $number = null;
    }

    $options = [
      'up' => fn($number) => $this->up($number),
      'down' => fn($number) => $this->down($number),
    ];

    ($options[$arguments[1] ?? 0] ?? fn($_) => $this->invalid_option())($number);

    $this->save_migrated_file();

    App\Core\Database::close_all();
  }

  private function invalid_option(): void
  {
    echo 'Opção inválida.' . PHP_EOL;
    echo 'Consulte a documentação para ver as opções.' . PHP_EOL;
  }

  private function migration_name(string $filename): string
  {
    $filename_arr = explode('/', $filename);
    $last = end($filename_arr);

    return $last;
  }

  private function migration_datetime(string $migration_name): int
  {
    $datetime = substr($migration_name, 0, 14);

    if (ctype_digit($datetime)) {
      return (int) $datetime;
    }

    throw new Exception('Migração com data (nome) inválida.');
  }

  private function up(?int $number = null): void
  {
    $migrations = glob(MIGRATIONSDIR . '/*.php');

    if (empty($migrations)) {
      return;
    }

    $number = $number ?? count($migrations);
    $count = 0;

    foreach ($migrations as $migration) {
      $name = $this->migration_name($migration);
      $date = $this->migration_datetime($name);

      if (in_array($date, $this->migrated)) {
        continue;
      }

      if ($count >= $number) {
        continue;
      }

      $this->up_migration($migration, $name);

      $this->migrated[] = $date;

      $count++;
    }
  }

  private function down(?int $number = null): void
  {
    $migrations = glob(MIGRATIONSDIR . '/*.php');

    if (empty($migrations)) {
      return;
    }

    $number = $number ?? count($migrations);
    $count = 0;

    $migrations = array_reverse($migrations);

    foreach ($migrations as $migration) {
      $name = $this->migration_name($migration);
      $date = $this->migration_datetime($name);

      if (!in_array($date, $this->migrated)) {
        continue;
      }

      if ($count >= $number) {
        continue;
      }

      $this->down_migration($migration, $name);

      $key = array_search($date, $this->migrated);
      unset($this->migrated[$key]);

      $count++;
    }
  }

  private function up_migration(string $file, string $name): void
  {
    echo str_repeat('-', 30) . PHP_EOL;
    echo 'Migrando ' . $name . PHP_EOL;

    $migration_arr = include $file;

    if (empty($migration_arr['up']) || empty($migration_arr['down'])) {
      throw new Exception(
        'Migração inválida. Toda migração deve ter um \'up\' e um \'down\'.' . PHP_EOL
      );
    }

    try {
      $migration_arr['up']();
    } catch (Exception $exception) {
      throw new Exception(
        'Erro ao migrar: ' . $exception->getMessage() . PHP_EOL
      );
    }
  }

  private function down_migration(string $file, string $name): void
  {
    echo str_repeat('-', 30) . PHP_EOL;
    echo 'Voltando ' . $name . PHP_EOL;

    $migration_arr = include $file;

    if (empty($migration_arr['up']) || empty($migration_arr['down'])) {
      throw new Exception(
        'Migração inválida. Toda migração deve ter um \'up\' e um \'down\'.' . PHP_EOL
      );
    }

    try {
      $migration_arr['down']();
    } catch (Exception $exception) {
      throw new Exception(
        'Erro ao voltar: ' . $exception->getMessage() . PHP_EOL
      );
    }
  }
}

include __DIR__ . '/../../bootstrap/constants.php';
include __DIR__ . '/../vendor/autoload.php';

(new Migrator())->start($argv);
